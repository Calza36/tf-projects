  # aws_route_table.public_route_table will be created
  + resource "aws_route_table" "public_route_table" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + gateway_id                 = (known after apply)
                # (11 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Name" = "tf-basic-rt"
        }
      + tags_all         = {
          + "Name" = "tf-basic-rt"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.public_rta will be created
  + resource "aws_route_table_association" "public_rta" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_security_group.web_sg will be created
  + resource "aws_security_group" "web_sg" {
      + arn                    = (known after apply)
      + description            = "SG para SSH y HTTP"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "HTTP"
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "SSH"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "tf-basic-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # aws_subnet.public_subnet will be created
  + resource "aws_subnet" "public_subnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "eu-north-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "tf-basic-subnet"
        }
      + tags_all                                       = {
          + "Name" = "tf-basic-subnet"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_vpc.main will be created
  + resource "aws_vpc" "main" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = (known after apply)
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name" = "tf-basic-vpc"
        }
      + tags_all                             = {
          + "Name" = "tf-basic-vpc"
        }
    }

Plan: 7 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + instance_id                      = (known after apply)
  + instance_state                   = (known after apply)
  + instance_type                    = "t2.micro"
  + network_summary                  = {
      + associated_subnet      = (known after apply)
      + route_table_id         = (known after apply)
      + route_table_routes     = [
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = "0.0.0.0/0"
              + core_network_arn           = ""
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = (known after apply)
              + ipv6_cidr_block            = ""
              + local_gateway_id           = ""
              + nat_gateway_id             = ""
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
      + route_table_vpc        = (known after apply)
      + security_group_egress  = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + security_group_id      = (known after apply)
      + security_group_ingress = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "HTTP"
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "SSH"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + security_group_vpc     = (known after apply)
      + vpc_id                 = (known after apply)
    }
  + private_ip                       = (known after apply)
  + public_dns                       = (known after apply)
  + public_ip                        = (known after apply)
  + route_table_all_rules            = [
      + {
          + carrier_gateway_id         = ""
          + cidr_block                 = "0.0.0.0/0"
          + core_network_arn           = ""
          + destination_prefix_list_id = ""
          + egress_only_gateway_id     = ""
          + gateway_id                 = (known after apply)
          + ipv6_cidr_block            = ""
          + local_gateway_id           = ""
          + nat_gateway_id             = ""
          + network_interface_id       = ""
          + transit_gateway_id         = ""
          + vpc_endpoint_id            = ""
          + vpc_peering_connection_id  = ""
        },
    ]
  + route_table_all_rules_jsonformat = (known after apply)
  + route_table_subnets              = (known after apply)
  + route_table_vpc                  = (known after apply)
  + security_group_egress_rules      = [
      + {
          + cidr_blocks      = [
              + "0.0.0.0/0",
            ]
          + description      = ""
          + from_port        = 0
          + ipv6_cidr_blocks = []
          + prefix_list_ids  = []
          + protocol         = "-1"
          + security_groups  = []
          + self             = false
          + to_port          = 0
        },
    ]
  + security_group_ingress_rules     = [
      + {
          + cidr_blocks      = [
              + "0.0.0.0/0",
            ]
          + description      = "HTTP"
          + from_port        = 80
          + ipv6_cidr_blocks = []
          + prefix_list_ids  = []
          + protocol         = "tcp"
          + security_groups  = []
          + self             = false
          + to_port          = 80
        },
      + {
          + cidr_blocks      = [
              + "0.0.0.0/0",
            ]
          + description      = "SSH"
          + from_port        = 22
          + ipv6_cidr_blocks = []
          + prefix_list_ids  = []
          + protocol         = "tcp"
          + security_groups  = []
          + self             = false
          + to_port          = 22
        },
    ]
  + security_group_vpc               = (known after apply)

─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Saved the plan to: planfile

To perform exactly these actions, run the following command to apply:
    terraform apply "planfile"
ernesto@ECM:~/terraform/tf-projects/aws-basic$ terraform apply planfile
aws_vpc.main: Creating...
aws_vpc.main: Creation complete after 1s [id=vpc-0d89a3109b784d306]
aws_internet_gateway.igw: Creating...
aws_subnet.public_subnet: Creating...
aws_security_group.web_sg: Creating...
aws_internet_gateway.igw: Creation complete after 1s [id=igw-00b532b674f94d714]
aws_route_table.public_route_table: Creating...
aws_route_table.public_route_table: Creation complete after 1s [id=rtb-0b569e25050b5e851]
aws_security_group.web_sg: Creation complete after 3s [id=sg-0b7c0640dab5d4368]
aws_subnet.public_subnet: Still creating... [10s elapsed]
aws_subnet.public_subnet: Creation complete after 13s [id=subnet-080f8f5c5a9bc9fd0]
aws_route_table_association.public_rta: Creating...
aws_instance.web_server: Creating...
aws_route_table_association.public_rta: Creation complete after 1s [id=rtbassoc-0ede1a55cee261f2f]
╷
│ Error: creating EC2 Instance: operation error EC2: RunInstances, https response error StatusCode: 400, RequestID: d787c12e-7a0b-486f-a0fb-fdac12ba9676, api error Unsupported: The requested configuration is currently not supported. Please check the documentation for supported configurations.
│ 
│   with aws_instance.web_server,
│   on main.tf line 68, in resource "aws_instance" "web_server":
│   68: resource "aws_instance" "web_server" {
│ 
╵
ernesto@ECM:~/terraform/tf-project
ernesto@ECM:~/terraform/tf-projects/aws-basic$ terraform apply planfile
╷
│ Error: Saved plan is stale
│ 
│ The given plan file can no longer be applied because the state was changed by another operation after the plan was created.
╵
ernesto@ECM:~/terraform/tf-projects/aws-basic$ terraform plan -out planfile
aws_vpc.main: Refreshing state... [id=vpc-0d89a3109b784d306]
aws_subnet.public_subnet: Refreshing state... [id=subnet-080f8f5c5a9bc9fd0]
aws_internet_gateway.igw: Refreshing state... [id=igw-00b532b674f94d714]
aws_security_group.web_sg: Refreshing state... [id=sg-0b7c0640dab5d4368]
aws_route_table.public_route_table: Refreshing state... [id=rtb-0b569e25050b5e851]
aws_route_table_association.public_rta: Refreshing state... [id=rtbassoc-0ede1a55cee261f2f]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.web_server will be created
  + resource "aws_instance" "web_server" {
      + ami                                  = "ami-075449515af5df0d1"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + enable_primary_ipv6                  = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t3.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = "subnet-080f8f5c5a9bc9fd0"
      + tags                                 = {
          + "Name" = "tf-basic-ec2"
        }
      + tags_all                             = {
          + "Name" = "tf-basic-ec2"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = [
          + "sg-0b7c0640dab5d4368",
        ]

      + capacity_reservation_specification (known after apply)

      + cpu_options (known after apply)

      + ebs_block_device (known after apply)

      + enclave_options (known after apply)

      + ephemeral_block_device (known after apply)

      + instance_market_options (known after apply)

      + maintenance_options (known after apply)

      + metadata_options (known after apply)

      + network_interface (known after apply)

      + private_dns_name_options (known after apply)

      + root_block_device (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + instance_id                      = (known after apply)
  + instance_state                   = (known after apply)
  ~ instance_type                    = "t2.micro" -> "t3.micro"
  + private_ip                       = (known after apply)
  + public_dns                       = (known after apply)
  + public_ip                        = (known after apply)

─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Saved the plan to: planfile

To perform exactly these actions, run the following command to apply:
    terraform apply "planfile"
ernesto@ECM:~/terraform/tf-projects/aws-basic$ terraform apply planfile
aws_instance.web_server: Creating...
aws_instance.web_server: Still creating... [10s elapsed]
aws_instance.web_server: Creation complete after 13s [id=i-050a68b6837b036f9]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

Outputs:

instance_id = "i-050a68b6837b036f9"
instance_state = "running"
instance_type = "t3.micro"
network_summary = {
  "associated_subnet" = "subnet-080f8f5c5a9bc9fd0"
  "route_table_id" = "rtb-0b569e25050b5e851"
  "route_table_routes" = toset([
    {
      "carrier_gateway_id" = ""
      "cidr_block" = "0.0.0.0/0"
      "core_network_arn" = ""
      "destination_prefix_list_id" = ""
      "egress_only_gateway_id" = ""
      "gateway_id" = "igw-00b532b674f94d714"
      "ipv6_cidr_block" = ""
      "local_gateway_id" = ""
      "nat_gateway_id" = ""
      "network_interface_id" = ""
      "transit_gateway_id" = ""
      "vpc_endpoint_id" = ""
      "vpc_peering_connection_id" = ""
    },
  ])
  "route_table_vpc" = "vpc-0d89a3109b784d306"
  "security_group_egress" = toset([
    {
      "cidr_blocks" = tolist([
        "0.0.0.0/0",
      ])
      "description" = ""
      "from_port" = 0
      "ipv6_cidr_blocks" = tolist([])
      "prefix_list_ids" = tolist([])
      "protocol" = "-1"
      "security_groups" = toset([])
      "self" = false
      "to_port" = 0
    },
  ])
  "security_group_id" = "sg-0b7c0640dab5d4368"
  "security_group_ingress" = toset([
    {
      "cidr_blocks" = tolist([
        "0.0.0.0/0",
      ])
      "description" = "HTTP"
      "from_port" = 80
      "ipv6_cidr_blocks" = tolist([])
      "prefix_list_ids" = tolist([])
      "protocol" = "tcp"
      "security_groups" = toset([])
      "self" = false
      "to_port" = 80
    },
    {
      "cidr_blocks" = tolist([
        "0.0.0.0/0",
      ])
      "description" = "SSH"
      "from_port" = 22
      "ipv6_cidr_blocks" = tolist([])
      "prefix_list_ids" = tolist([])
      "protocol" = "tcp"
      "security_groups" = toset([])
      "self" = false
      "to_port" = 22
    },
  ])
  "security_group_vpc" = "vpc-0d89a3109b784d306"
  "vpc_id" = "vpc-0d89a3109b784d306"
}
private_ip = "10.0.1.137"
public_dns = ""
public_ip = "13.51.156.237"
route_table_all_rules = toset([
  {
    "carrier_gateway_id" = ""
    "cidr_block" = "0.0.0.0/0"
    "core_network_arn" = ""
    "destination_prefix_list_id" = ""
    "egress_only_gateway_id" = ""
    "gateway_id" = "igw-00b532b674f94d714"
    "ipv6_cidr_block" = ""
    "local_gateway_id" = ""
    "nat_gateway_id" = ""
    "network_interface_id" = ""
    "transit_gateway_id" = ""
    "vpc_endpoint_id" = ""
    "vpc_peering_connection_id" = ""
  },
])
route_table_all_rules_jsonformat = "[{\"carrier_gateway_id\":\"\",\"cidr_block\":\"0.0.0.0/0\",\"core_network_arn\":\"\",\"destination_prefix_list_id\":\"\",\"egress_only_gateway_id\":\"\",\"gateway_id\":\"igw-00b532b674f94d714\",\"ipv6_cidr_block\":\"\",\"local_gateway_id\":\"\",\"nat_gateway_id\":\"\",\"network_interface_id\":\"\",\"transit_gateway_id\":\"\",\"vpc_endpoint_id\":\"\",\"vpc_peering_connection_id\":\"\"}]"
route_table_subnets = "subnet-080f8f5c5a9bc9fd0"
route_table_vpc = "vpc-0d89a3109b784d306"
security_group_egress_rules = toset([
  {
    "cidr_blocks" = tolist([
      "0.0.0.0/0",
    ])
    "description" = ""
    "from_port" = 0
    "ipv6_cidr_blocks" = tolist([])
    "prefix_list_ids" = tolist([])
    "protocol" = "-1"
    "security_groups" = toset([])
    "self" = false
    "to_port" = 0
  },
])
security_group_ingress_rules = toset([
  {
    "cidr_blocks" = tolist([
      "0.0.0.0/0",
    ])
    "description" = "HTTP"
    "from_port" = 80
    "ipv6_cidr_blocks" = tolist([])
    "prefix_list_ids" = tolist([])
    "protocol" = "tcp"
    "security_groups" = toset([])
    "self" = false
    "to_port" = 80
  },
  {
    "cidr_blocks" = tolist([
      "0.0.0.0/0",
    ])
    "description" = "SSH"
    "from_port" = 22
    "ipv6_cidr_blocks" = tolist([])
    "prefix_list_ids" = tolist([])
    "protocol" = "tcp"
    "security_groups" = toset([])
    "self" = false
    "to_port" = 22
  },
])
security_group_vpc = "vpc-0d89a3109b784d306"
ernesto@ECM:~/terraform/tf-projects/aws-basic$ terraform destroy
aws_vpc.main: Refreshing state... [id=vpc-0d89a3109b784d306]
aws_internet_gateway.igw: Refreshing state... [id=igw-00b532b674f94d714]
aws_subnet.public_subnet: Refreshing state... [id=subnet-080f8f5c5a9bc9fd0]
aws_security_group.web_sg: Refreshing state... [id=sg-0b7c0640dab5d4368]
aws_route_table.public_route_table: Refreshing state... [id=rtb-0b569e25050b5e851]
aws_instance.web_server: Refreshing state... [id=i-050a68b6837b036f9]
aws_route_table_association.public_rta: Refreshing state... [id=rtbassoc-0ede1a55cee261f2f]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  # aws_instance.web_server will be destroyed
  - resource "aws_instance" "web_server" {
      - ami                                  = "ami-075449515af5df0d1" -> null
      - arn                                  = "arn:aws:ec2:eu-north-1:700769905140:instance/i-050a68b6837b036f9" -> null
      - associate_public_ip_address          = true -> null
      - availability_zone                    = "eu-north-1a" -> null
      - cpu_core_count                       = 1 -> null
      - cpu_threads_per_core                 = 2 -> null
      - disable_api_stop                     = false -> null
      - disable_api_termination              = false -> null
      - ebs_optimized                        = false -> null
      - get_password_data                    = false -> null
      - hibernation                          = false -> null
      - id                                   = "i-050a68b6837b036f9" -> null
      - instance_initiated_shutdown_behavior = "stop" -> null
      - instance_state                       = "running" -> null
      - instance_type                        = "t3.micro" -> null
      - ipv6_address_count                   = 0 -> null
      - ipv6_addresses                       = [] -> null
      - monitoring                           = false -> null
      - placement_partition_number           = 0 -> null
      - primary_network_interface_id         = "eni-0d53c3e993d973648" -> null
      - private_dns                          = "ip-10-0-1-137.eu-north-1.compute.internal" -> null
      - private_ip                           = "10.0.1.137" -> null
      - public_ip                            = "13.51.156.237" -> null
      - secondary_private_ips                = [] -> null
      - security_groups                      = [] -> null
      - source_dest_check                    = true -> null
      - subnet_id                            = "subnet-080f8f5c5a9bc9fd0" -> null
      - tags                                 = {
          - "Name" = "tf-basic-ec2"
        } -> null
      - tags_all                             = {
          - "Name" = "tf-basic-ec2"
        } -> null
      - tenancy                              = "default" -> null
      - user_data_replace_on_change          = false -> null
      - vpc_security_group_ids               = [
          - "sg-0b7c0640dab5d4368",
        ] -> null
        # (9 unchanged attributes hidden)

      - capacity_reservation_specification {
          - capacity_reservation_preference = "open" -> null
        }

      - cpu_options {
          - core_count       = 1 -> null
          - threads_per_core = 2 -> null
            # (1 unchanged attribute hidden)
        }

      - credit_specification {
          - cpu_credits = "unlimited" -> null
        }

      - enclave_options {
          - enabled = false -> null
        }

      - maintenance_options {
          - auto_recovery = "default" -> null
        }

      - metadata_options {
          - http_endpoint               = "enabled" -> null
          - http_protocol_ipv6          = "disabled" -> null
          - http_put_response_hop_limit = 2 -> null
          - http_tokens                 = "required" -> null
          - instance_metadata_tags      = "disabled" -> null
        }

      - private_dns_name_options {
          - enable_resource_name_dns_a_record    = false -> null
          - enable_resource_name_dns_aaaa_record = false -> null
          - hostname_type                        = "ip-name" -> null
        }

      - root_block_device {
          - delete_on_termination = true -> null
          - device_name           = "/dev/sda1" -> null
          - encrypted             = false -> null
          - iops                  = 3000 -> null
          - tags                  = {} -> null
          - tags_all              = {} -> null
          - throughput            = 125 -> null
          - volume_id             = "vol-001d97919fbc56cb9" -> null
          - volume_size           = 8 -> null
          - volume_type           = "gp3" -> null
            # (1 unchanged attribute hidden)
        }
    }

  # aws_internet_gateway.igw will be destroyed
  - resource "aws_internet_gateway" "igw" {
      - arn      = "arn:aws:ec2:eu-north-1:700769905140:internet-gateway/igw-00b532b674f94d714" -> null
      - id       = "igw-00b532b674f94d714" -> null
      - owner_id = "700769905140" -> null
      - tags     = {
          - "Name" = "tf-basic-igw"
        } -> null
      - tags_all = {
          - "Name" = "tf-basic-igw"
        } -> null
      - vpc_id   = "vpc-0d89a3109b784d306" -> null
    }

  # aws_route_table.public_route_table will be destroyed
  - resource "aws_route_table" "public_route_table" {
      - arn              = "arn:aws:ec2:eu-north-1:700769905140:route-table/rtb-0b569e25050b5e851" -> null
      - id               = "rtb-0b569e25050b5e851" -> null
      - owner_id         = "700769905140" -> null
      - propagating_vgws = [] -> null
      - route            = [
          - {
              - cidr_block                 = "0.0.0.0/0"
              - gateway_id                 = "igw-00b532b674f94d714"
                # (11 unchanged attributes hidden)
            },
        ] -> null
      - tags             = {
          - "Name" = "tf-basic-rt"
        } -> null
      - tags_all         = {
          - "Name" = "tf-basic-rt"
        } -> null
      - vpc_id           = "vpc-0d89a3109b784d306" -> null
    }

  # aws_route_table_association.public_rta will be destroyed
  - resource "aws_route_table_association" "public_rta" {
      - id             = "rtbassoc-0ede1a55cee261f2f" -> null
      - route_table_id = "rtb-0b569e25050b5e851" -> null
      - subnet_id      = "subnet-080f8f5c5a9bc9fd0" -> null
        # (1 unchanged attribute hidden)
    }

  # aws_security_group.web_sg will be destroyed
  - resource "aws_security_group" "web_sg" {
      - arn                    = "arn:aws:ec2:eu-north-1:700769905140:security-group/sg-0b7c0640dab5d4368" -> null
      - description            = "SG para SSH y HTTP" -> null
      - egress                 = [
          - {
              - cidr_blocks      = [
                  - "0.0.0.0/0",
                ]
              - from_port        = 0
              - ipv6_cidr_blocks = []
              - prefix_list_ids  = []
              - protocol         = "-1"
              - security_groups  = []
              - self             = false
              - to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ] -> null
      - id                     = "sg-0b7c0640dab5d4368" -> null
      - ingress                = [
          - {
              - cidr_blocks      = [
                  - "0.0.0.0/0",
                ]
              - description      = "HTTP"
              - from_port        = 80
              - ipv6_cidr_blocks = []
              - prefix_list_ids  = []
              - protocol         = "tcp"
              - security_groups  = []
              - self             = false
              - to_port          = 80
            },
          - {
              - cidr_blocks      = [
                  - "0.0.0.0/0",
                ]
              - description      = "SSH"
              - from_port        = 22
              - ipv6_cidr_blocks = []
              - prefix_list_ids  = []
              - protocol         = "tcp"
              - security_groups  = []
              - self             = false
              - to_port          = 22
            },
        ] -> null
      - name                   = "tf-basic-sg" -> null
      - owner_id               = "700769905140" -> null
      - revoke_rules_on_delete = false -> null
      - tags                   = {} -> null
      - tags_all               = {} -> null
      - vpc_id                 = "vpc-0d89a3109b784d306" -> null
        # (1 unchanged attribute hidden)
    }

  # aws_subnet.public_subnet will be destroyed
  - resource "aws_subnet" "public_subnet" {
      - arn                                            = "arn:aws:ec2:eu-north-1:700769905140:subnet/subnet-080f8f5c5a9bc9fd0" -> null
      - assign_ipv6_address_on_creation                = false -> null
      - availability_zone                              = "eu-north-1a" -> null
      - availability_zone_id                           = "eun1-az1" -> null
      - cidr_block                                     = "10.0.1.0/24" -> null
      - enable_dns64                                   = false -> null
      - enable_lni_at_device_index                     = 0 -> null
      - enable_resource_name_dns_a_record_on_launch    = false -> null
      - enable_resource_name_dns_aaaa_record_on_launch = false -> null
      - id                                             = "subnet-080f8f5c5a9bc9fd0" -> null
      - ipv6_native                                    = false -> null
      - map_customer_owned_ip_on_launch                = false -> null
      - map_public_ip_on_launch                        = true -> null
      - owner_id                                       = "700769905140" -> null
      - private_dns_hostname_type_on_launch            = "ip-name" -> null
      - tags                                           = {
          - "Name" = "tf-basic-subnet"
        } -> null
      - tags_all                                       = {
          - "Name" = "tf-basic-subnet"
        } -> null
      - vpc_id                                         = "vpc-0d89a3109b784d306" -> null
        # (4 unchanged attributes hidden)
    }

  # aws_vpc.main will be destroyed
  - resource "aws_vpc" "main" {
      - arn                                  = "arn:aws:ec2:eu-north-1:700769905140:vpc/vpc-0d89a3109b784d306" -> null
      - assign_generated_ipv6_cidr_block     = false -> null
      - cidr_block                           = "10.0.0.0/16" -> null
      - default_network_acl_id               = "acl-09633832a3c674891" -> null
      - default_route_table_id               = "rtb-06e67f989d201d938" -> null
      - default_security_group_id            = "sg-001632303e1de71ea" -> null
      - dhcp_options_id                      = "dopt-0125c730ec4ca67bb" -> null
      - enable_dns_hostnames                 = false -> null
      - enable_dns_support                   = true -> null
      - enable_network_address_usage_metrics = false -> null
      - id                                   = "vpc-0d89a3109b784d306" -> null
      - instance_tenancy                     = "default" -> null
      - ipv6_netmask_length                  = 0 -> null
      - main_route_table_id                  = "rtb-06e67f989d201d938" -> null
      - owner_id                             = "700769905140" -> null
      - tags                                 = {
          - "Name" = "tf-basic-vpc"
        } -> null
      - tags_all                             = {
          - "Name" = "tf-basic-vpc"
        } -> null
        # (4 unchanged attributes hidden)
    }

Plan: 0 to add, 0 to change, 7 to destroy.

Changes to Outputs:
  - instance_id                      = "i-050a68b6837b036f9" -> null
  - instance_state                   = "running" -> null
  - instance_type                    = "t3.micro" -> null
  - network_summary                  = {
      - associated_subnet      = "subnet-080f8f5c5a9bc9fd0"
      - route_table_id         = "rtb-0b569e25050b5e851"
      - route_table_routes     = [
          - {
              - carrier_gateway_id         = ""
              - cidr_block                 = "0.0.0.0/0"
              - core_network_arn           = ""
              - destination_prefix_list_id = ""
              - egress_only_gateway_id     = ""
              - gateway_id                 = "igw-00b532b674f94d714"
              - ipv6_cidr_block            = ""
              - local_gateway_id           = ""
              - nat_gateway_id             = ""
              - network_interface_id       = ""
              - transit_gateway_id         = ""
              - vpc_endpoint_id            = ""
              - vpc_peering_connection_id  = ""
            },
        ]
      - route_table_vpc        = "vpc-0d89a3109b784d306"
      - security_group_egress  = [
          - {
              - cidr_blocks      = [
                  - "0.0.0.0/0",
                ]
              - description      = ""
              - from_port        = 0
              - ipv6_cidr_blocks = []
              - prefix_list_ids  = []
              - protocol         = "-1"
              - security_groups  = []
              - self             = false
              - to_port          = 0
            },
        ]
      - security_group_id      = "sg-0b7c0640dab5d4368"
      - security_group_ingress = [
          - {
              - cidr_blocks      = [
                  - "0.0.0.0/0",
                ]
              - description      = "HTTP"
              - from_port        = 80
              - ipv6_cidr_blocks = []
              - prefix_list_ids  = []
              - protocol         = "tcp"
              - security_groups  = []
              - self             = false
              - to_port          = 80
            },
          - {
              - cidr_blocks      = [
                  - "0.0.0.0/0",
                ]
              - description      = "SSH"
              - from_port        = 22
              - ipv6_cidr_blocks = []
              - prefix_list_ids  = []
              - protocol         = "tcp"
              - security_groups  = []
              - self             = false
              - to_port          = 22
            },
        ]
      - security_group_vpc     = "vpc-0d89a3109b784d306"
      - vpc_id                 = "vpc-0d89a3109b784d306"
    } -> null
  - private_ip                       = "10.0.1.137" -> null
  - public_dns                       = "" -> null
  - public_ip                        = "13.51.156.237" -> null
  - route_table_all_rules            = [
      - {
          - carrier_gateway_id         = ""
          - cidr_block                 = "0.0.0.0/0"
          - core_network_arn           = ""
          - destination_prefix_list_id = ""
          - egress_only_gateway_id     = ""
          - gateway_id                 = "igw-00b532b674f94d714"
          - ipv6_cidr_block            = ""
          - local_gateway_id           = ""
          - nat_gateway_id             = ""
          - network_interface_id       = ""
          - transit_gateway_id         = ""
          - vpc_endpoint_id            = ""
          - vpc_peering_connection_id  = ""
        },
    ] -> null
  - route_table_all_rules_jsonformat = jsonencode(
        [
          - {
              - carrier_gateway_id         = ""
              - cidr_block                 = "0.0.0.0/0"
              - core_network_arn           = ""
              - destination_prefix_list_id = ""
              - egress_only_gateway_id     = ""
              - gateway_id                 = "igw-00b532b674f94d714"
              - ipv6_cidr_block            = ""
              - local_gateway_id           = ""
              - nat_gateway_id             = ""
              - network_interface_id       = ""
              - transit_gateway_id         = ""
              - vpc_endpoint_id            = ""
              - vpc_peering_connection_id  = ""
            },
        ]
    ) -> null
  - route_table_subnets              = "subnet-080f8f5c5a9bc9fd0" -> null
  - route_table_vpc                  = "vpc-0d89a3109b784d306" -> null
  - security_group_egress_rules      = [
      - {
          - cidr_blocks      = [
              - "0.0.0.0/0",
            ]
          - description      = ""
          - from_port        = 0
          - ipv6_cidr_blocks = []
          - prefix_list_ids  = []
          - protocol         = "-1"
          - security_groups  = []
          - self             = false
          - to_port          = 0
        },
    ] -> null
  - security_group_ingress_rules     = [
      - {
          - cidr_blocks      = [
              - "0.0.0.0/0",
            ]
          - description      = "HTTP"
          - from_port        = 80
          - ipv6_cidr_blocks = []
          - prefix_list_ids  = []
          - protocol         = "tcp"
          - security_groups  = []
          - self             = false
          - to_port          = 80
        },
      - {
          - cidr_blocks      = [
              - "0.0.0.0/0",
            ]
          - description      = "SSH"
          - from_port        = 22
          - ipv6_cidr_blocks = []
          - prefix_list_ids  = []
          - protocol         = "tcp"
          - security_groups  = []
          - self             = false
          - to_port          = 22
        },
    ] -> null
  - security_group_vpc               = "vpc-0d89a3109b784d306" -> null

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

aws_route_table_association.public_rta: Destroying... [id=rtbassoc-0ede1a55cee261f2f]
aws_instance.web_server: Destroying... [id=i-050a68b6837b036f9]
aws_route_table_association.public_rta: Destruction complete after 1s
aws_route_table.public_route_table: Destroying... [id=rtb-0b569e25050b5e851]
aws_route_table.public_route_table: Destruction complete after 0s
aws_internet_gateway.igw: Destroying... [id=igw-00b532b674f94d714]
aws_instance.web_server: Still destroying... [id=i-050a68b6837b036f9, 10s elapsed]
aws_internet_gateway.igw: Still destroying... [id=igw-00b532b674f94d714, 10s elapsed]
aws_instance.web_server: Still destroying... [id=i-050a68b6837b036f9, 21s elapsed]
aws_internet_gateway.igw: Still destroying... [id=igw-00b532b674f94d714, 22s elapsed]
aws_instance.web_server: Still destroying... [id=i-050a68b6837b036f9, 31s elapsed]
aws_internet_gateway.igw: Still destroying... [id=igw-00b532b674f94d714, 32s elapsed]
aws_instance.web_server: Still destroying... [id=i-050a68b6837b036f9, 41s elapsed]
aws_internet_gateway.igw: Still destroying... [id=igw-00b532b674f94d714, 42s elapsed]
aws_instance.web_server: Still destroying... [id=i-050a68b6837b036f9, 53s elapsed]
aws_internet_gateway.igw: Still destroying... [id=igw-00b532b674f94d714, 53s elapsed]
aws_internet_gateway.igw: Destruction complete after 1m1s
aws_instance.web_server: Still destroying... [id=i-050a68b6837b036f9, 1m3s elapsed]
aws_instance.web_server: Destruction complete after 1m4s
aws_subnet.public_subnet: Destroying... [id=subnet-080f8f5c5a9bc9fd0]
aws_security_group.web_sg: Destroying... [id=sg-0b7c0640dab5d4368]
aws_subnet.public_subnet: Destruction complete after 1s
aws_security_group.web_sg: Destruction complete after 1s
aws_vpc.main: Destroying... [id=vpc-0d89a3109b784d306]
aws_vpc.main: Destruction complete after 1s

Destroy complete! Resources: 7 destroyed.
ernesto@ECM:~/terraform/tf-projects/aws-basic$ 